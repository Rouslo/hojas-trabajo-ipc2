# -*- coding: utf-8 -*-
"""3. Listas doblemente enlazadas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eaUvfp44adnzeSlIb4XvyjwbCtt19ebn

# **Listas doblemente enlazadas**
**Definición de la clase Receta**
"""

class receta:
  def __init__(self, paciente, fecha_nac, doctor, colegiado, fecha_cita,
               hora_cita, tipo_consulta, tratamiento):
    self.paciente = paciente
    self.fecha_nac = fecha_nac
    self.doctor = doctor
    self.colegiado = colegiado
    self.fecha_cita = fecha_cita
    self.hora_cita = hora_cita
    self.tipo_consulta = tipo_consulta
    self.tratamiento = tratamiento

"""**Definición de la clase Nodo**"""

class nodo:
  def __init__(self, receta=None, siguiente=None, anterior=None):
    self.receta = receta
    self.siguiente = siguiente
    anterior = anterior

"""**`Definición de la Clase Lista Doblemente Enlazada`**"""

class lista_doble:
  def __init__(self):
    self.primero = None

  def insertar(self, receta):
    if self.primero is None:
      self.primero = nodo(receta=receta)
    else:
      actual = nodo(receta=receta, siguiente=self.primero)
      self.primero.anterior = actual
      self.primero = actual

  def recorrer(self):
    if self.primero is None:
      return
    actual = self.primero
    print("Paciente: ", actual.receta.paciente, "| Fecha de nacimiento: ",
            actual.receta.fecha_nac, "| Doctor: ", actual.receta.doctor, 
            "| Colegiado: ", actual.receta.colegiado, "| Fecha de cita: ",
            actual.receta.fecha_cita, "| Hora de cita: ", actual.receta.hora_cita,
            "| Tipo de consulta: ", actual.receta.tipo_consulta, "| Tratamiento",
            actual.receta.tratamiento)
    while actual.siguiente:
      actual = actual.siguiente
      print("Paciente: ", actual.receta.paciente, "| Fecha de nacimiento: ",
            actual.receta.fecha_nac, "| Doctor: ", actual.receta.doctor, 
            "| Colegiado: ", actual.receta.colegiado, "| Fecha de cita: ",
            actual.receta.fecha_cita, "| Hora de cita: ", actual.receta.hora_cita,
            "| Tipo de consulta: ", actual.receta.tipo_consulta, "| Tratamiento",
            actual.receta.tratamiento)
      
  def eliminar(self, colegiado, fecha_cita, hora_cita):
    actual = self.primero
    while actual:
      if actual.receta.colegiado == colegiado and actual.receta.fecha_cita == fecha_cita and actual.receta.hora_cita == hora_cita:
        if actual.anterior:
          if actual.siguiente:
            actual.anterior.siguiente = actual.siguiente
            actual.siguiente.anterior = actual.anterior
          else:
            actual.anterior.siguiente = None
            actual.anterior = None
        else:
          if actual.siguiente:
            self.primero = actual.siguiente 
            actual.siguiente.anterior = None
          else:
            self.primero = None
        return True
      else:
        actual = actual.siguiente
    return False

"""**Creación de objetos Receta**"""

r1 = receta("Gerson López", "03-10-1990", "Melvin Ortiz", 20156, "17-01-2023", "11:30",
            "Medicina general", "2 pildoras de acetaminofén cada 6 horas")
r2 = receta("Karen Gómez", "08-05-2000", "Jorge Merida", 8567, "31-01-2023", "09:00", 
            "Medicina interna", "Tylenol de 20 ml cada 4 horas")
r3 = receta("Luis García", "17-09-1987", "Melvin Ortiz", 20157, "02-02-2023", "12:00", 
            "Medicina general", "2 cucharadas de Pepto-Bismol cada hora hasta que la diarrea desaparezca")

"""**Inserción**"""

lista_d = lista_doble()
lista_d.insertar(r1)
lista_d.insertar(r2)
lista_d.insertar(r3)

"""**Recorrer la lista**"""

lista_d.recorrer()

"""**Eliminar el nodo del medio de la lista**"""

lista_d.eliminar(8567,"31-01-2023","09:00")
lista_d.recorrer()

"""**Eliminar el nodo primero de la lista**"""

lista_d.eliminar(20157,"02-02-2023","12:00")
lista_d.recorrer()

"""**Eliminar el último nodo de la lista**"""

lista_d.eliminar(20156,"17-01-2023","11:30")
lista_d.recorrer()

"""**Eliminar nodo por nodo de la lista**"""

lista_d.eliminar(8567,"31-01-2023","09:00")
lista_d.recorrer()

lista_d.eliminar(20157,"02-02-2023","12:00")
lista_d.recorrer()

lista_d.eliminar(20156,"17-01-2023","11:30")
lista_d.recorrer()